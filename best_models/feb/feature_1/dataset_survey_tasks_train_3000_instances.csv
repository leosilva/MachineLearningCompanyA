Algorithm,Train Accuracy,Train Precision,Train Recall,Train F1 Score,Test Accuracy,Test Precision,Test Recall,Test F1 Score,Val. Accuracy,Val. Precision,Val. Recall,Val. F1 Score,AUC,Bal. Strategy,SMOTE Instances,Scale,Features,Folds,Hyper Params.,Model
RandomForestClassifier,0.9803,0.9806,0.9803,0.9802,0.9776,0.9777,0.9776,0.9776,0.8667,0.8906,0.8667,0.87,0.9965,smote,3000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 882}","RandomForestClassifier(n_estimators=20, random_state=882)"
KNeighborsClassifier,0.9768,0.9772,0.9768,0.9767,0.976,0.9764,0.976,0.9758,0.8667,0.8833,0.8667,0.869,0.992,smote,3000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', p=1, weights='distance')"
LogisticRegression,0.8658,0.866,0.8658,0.8657,0.8596,0.8598,0.8596,0.8596,0.85,0.8634,0.85,0.8505,0.96,smote,3000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 419, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=419)"
KNeighborsClassifier,0.9734,0.974,0.9734,0.9733,0.9765,0.9767,0.9765,0.9764,0.8333,0.8608,0.8333,0.8356,0.9903,smote,3000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', p=1, weights='distance')"
KNeighborsClassifier,0.9768,0.9773,0.9768,0.9767,0.9793,0.9795,0.9793,0.9792,0.8333,0.8769,0.8333,0.8349,0.9924,smote,3000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', p=1, weights='distance')"
DecisionTreeClassifier,0.9571,0.9576,0.9571,0.957,0.9508,0.9511,0.9508,0.9508,0.8333,0.8444,0.8333,0.8345,0.9885,smote,3000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 914}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=914)"
LogisticRegression,0.8641,0.8644,0.8641,0.8639,0.8563,0.8564,0.8563,0.8563,0.8333,0.8524,0.8333,0.8338,0.9605,smote,3000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 248, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=248)"
SVC,0.873,0.8743,0.873,0.8733,0.8663,0.8671,0.8663,0.8664,0.8333,0.8383,0.8333,0.831,0.9469,smote,3000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'linear', 'random_state': 866}","SVC(C=10, kernel='linear', probability=True, random_state=866)"
RandomForestClassifier,0.9815,0.9817,0.9815,0.9815,0.9838,0.9839,0.9838,0.9837,0.8167,0.8642,0.8167,0.822,0.9963,smote,3000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 182}","RandomForestClassifier(n_estimators=20, random_state=182)"
RandomForestClassifier,0.9792,0.9794,0.9792,0.9791,0.9827,0.9829,0.9827,0.9826,0.8167,0.8681,0.8167,0.819,0.9964,smote,3000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 939}","RandomForestClassifier(n_estimators=20, random_state=939)"
SVC,0.8673,0.869,0.8673,0.8677,0.8652,0.8671,0.8652,0.8652,0.8167,0.8406,0.8167,0.8162,0.9432,smote,3000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'linear', 'random_state': 560}","SVC(C=10, kernel='linear', probability=True, random_state=560)"
MLPClassifier,0.8754,0.8791,0.8754,0.8754,0.8926,0.8957,0.8926,0.8922,0.8167,0.8172,0.8167,0.8155,0.9727,smote,3000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 455, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=455)"
MLPClassifier,0.8929,0.8977,0.8929,0.8928,0.9004,0.9074,0.9004,0.9005,0.8167,0.825,0.8167,0.8153,0.9776,smote,3000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 568, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=568)"
DecisionTreeClassifier,0.9565,0.957,0.9565,0.9565,0.9508,0.9509,0.9508,0.9506,0.8,0.8062,0.8,0.8022,0.9891,smote,3000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 388}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=388)"
DecisionTreeClassifier,0.9571,0.9576,0.9571,0.957,0.9558,0.9562,0.9558,0.9558,0.7833,0.8062,0.7833,0.7869,0.9883,smote,3000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 945}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=945)"
MLPClassifier,0.8851,0.8879,0.8851,0.8849,0.8921,0.8922,0.8921,0.8921,0.7667,0.7688,0.7667,0.7656,0.9742,smote,3000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 193, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=193)"
LogisticRegression,0.8879,0.888,0.8879,0.8877,0.8949,0.8946,0.8949,0.8946,0.75,0.7599,0.75,0.7511,0.9624,smote,3000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 467, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=467)"
SVC,0.8872,0.887,0.8872,0.8866,0.8915,0.8913,0.8915,0.8909,0.75,0.7557,0.75,0.7487,0.9498,smote,3000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'linear', 'random_state': 193}","SVC(C=10, kernel='linear', probability=True, random_state=193)"
