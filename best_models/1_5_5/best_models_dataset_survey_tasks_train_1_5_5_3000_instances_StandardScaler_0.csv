Algorithm;Train Accuracy;Train Precision;Train Recall;Train F1 Score;Test Accuracy;Test Precision;Test Recall;Test F1 Score;Val. Accuracy;Val. Precision;Val. Recall;Val. F1 Score;AUC;Bal. Strategy;SMOTE Instances;Scale;Features;Folds;Hyper Params.;Model
KNeighborsClassifier;0.8936;0.8958;0.8936;0.8939;0.9163;0.9168;0.9163;0.9164;0.8333;0.838;0.8333;0.8317;0.9691;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'};"KNeighborsClassifier(metric='manhattan', n_neighbors=11, p=1,
                     weights='distance')"
KNeighborsClassifier;0.8954;0.8973;0.8954;0.8956;0.9203;0.9207;0.9203;0.9203;0.8167;0.8423;0.8167;0.8148;0.966;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 9, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', n_neighbors=9, p=1, weights='distance')
MLPClassifier;0.8742;0.8769;0.8742;0.8749;0.8815;0.8829;0.8815;0.8818;0.8;0.842;0.8;0.8029;0.9707;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 52, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=52)
RandomForestClassifier;0.9104;0.9109;0.9104;0.9107;0.9107;0.9113;0.9107;0.9108;0.8;0.8373;0.8;0.8016;0.977;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 862};RandomForestClassifier(n_estimators=20, random_state=862)
RandomForestClassifier;0.9128;0.9132;0.9128;0.9128;0.9057;0.9057;0.9057;0.9057;0.8;0.8373;0.8;0.8016;0.9784;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 812};RandomForestClassifier(n_estimators=20, random_state=812)
MLPClassifier;0.8735;0.8767;0.8735;0.8741;0.8978;0.9004;0.8978;0.8981;0.8;0.8442;0.8;0.7993;0.9695;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 522, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=522)
RandomForestClassifier;0.9097;0.9102;0.9097;0.9098;0.9074;0.9078;0.9074;0.9074;0.7833;0.8187;0.7833;0.7862;0.9754;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 822};RandomForestClassifier(n_estimators=20, random_state=822)
MLPClassifier;0.8689;0.8707;0.8689;0.8693;0.8944;0.8958;0.8944;0.8948;0.7833;0.8198;0.7833;0.7839;0.9696;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 610, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=610)
KNeighborsClassifier;0.899;0.9008;0.899;0.8994;0.909;0.91;0.909;0.9092;0.7833;0.8004;0.7833;0.782;0.9684;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'};"KNeighborsClassifier(metric='manhattan', n_neighbors=11, p=1,
                     weights='distance')"
DecisionTreeClassifier;0.8884;0.889;0.8884;0.8885;0.8647;0.872;0.8647;0.8656;0.7667;0.7777;0.7667;0.7652;0.916;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 231};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=231)
DecisionTreeClassifier;0.8903;0.8909;0.8903;0.8905;0.8608;0.866;0.8608;0.8618;0.7333;0.7354;0.7333;0.7321;0.9174;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 59};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=59)
SVC;0.806;0.8222;0.806;0.8077;0.849;0.8597;0.849;0.8501;0.7333;0.7427;0.7333;0.7266;0.9197;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 438};SVC(C=10, probability=True, random_state=438)
LogisticRegression;0.6939;0.6965;0.6939;0.6931;0.7069;0.7126;0.7069;0.7064;0.7167;0.7209;0.7167;0.7179;0.8713;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 666, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=666)"
LogisticRegression;0.6912;0.6939;0.6912;0.6909;0.6889;0.6907;0.6889;0.6882;0.7167;0.7209;0.7167;0.7179;0.8735;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 339, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=339)"
LogisticRegression;0.697;0.6994;0.697;0.6962;0.6889;0.6937;0.6889;0.6885;0.7167;0.7209;0.7167;0.7179;0.8742;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 624, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=624)"
DecisionTreeClassifier;0.8903;0.8908;0.8903;0.8903;0.8624;0.8659;0.8624;0.863;0.7167;0.718;0.7167;0.7162;0.9178;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 20, 'random_state': 418};DecisionTreeClassifier(max_depth=10, min_samples_leaf=20, random_state=418)
SVC;0.7995;0.8188;0.7995;0.8011;0.8568;0.8674;0.8568;0.8575;0.7167;0.7286;0.7167;0.7073;0.9147;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 178};SVC(C=10, probability=True, random_state=178)
SVC;0.8054;0.8213;0.8054;0.8071;0.8518;0.8616;0.8518;0.8534;0.7167;0.7286;0.7167;0.7073;0.919;smote;3000;StandardScaler;['storyPoints', 'polarity_mean', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 529};SVC(C=10, probability=True, random_state=529)
