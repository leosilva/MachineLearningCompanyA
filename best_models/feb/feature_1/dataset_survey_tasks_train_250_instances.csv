Algorithm,Train Accuracy,Train Precision,Train Recall,Train F1 Score,Test Accuracy,Test Precision,Test Recall,Test F1 Score,Val. Accuracy,Val. Precision,Val. Recall,Val. F1 Score,AUC,Bal. Strategy,SMOTE Instances,Scale,Features,Folds,Hyper Params.,Model
RandomForestClassifier,0.9329,0.9383,0.9329,0.933,0.9348,0.9348,0.9348,0.9343,0.85,0.8524,0.85,0.8497,0.9822,smote,250,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 572}","RandomForestClassifier(n_estimators=20, random_state=572)"
RandomForestClassifier,0.9185,0.9224,0.9185,0.9185,0.8841,0.9019,0.8841,0.885,0.8167,0.8208,0.8167,0.8161,0.9746,smote,250,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 167}","RandomForestClassifier(n_estimators=20, random_state=167)"
DecisionTreeClassifier,0.8842,0.8886,0.8842,0.8827,0.7971,0.8041,0.7971,0.7981,0.8167,0.822,0.8167,0.8148,0.9478,smote,250,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 636}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=636)"
DecisionTreeClassifier,0.8696,0.8756,0.8696,0.8685,0.8986,0.9038,0.8986,0.9,0.8,0.8595,0.8,0.8026,0.9381,smote,250,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 889}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=889)"
KNeighborsClassifier,0.8642,0.8685,0.8642,0.8639,0.8623,0.8661,0.8623,0.8626,0.8,0.8101,0.8,0.8019,0.959,smote,250,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 15, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', n_neighbors=15, p=1,
                     weights='distance')"
KNeighborsClassifier,0.8914,0.9012,0.8914,0.8903,0.8696,0.8707,0.8696,0.8696,0.7833,0.7835,0.7833,0.7821,0.9672,smote,250,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 9, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', n_neighbors=9, p=1, weights='distance')"
RandomForestClassifier,0.9202,0.9228,0.9202,0.92,0.8913,0.8947,0.8913,0.8912,0.75,0.8037,0.75,0.7489,0.9804,smote,250,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 821}","RandomForestClassifier(n_estimators=20, random_state=821)"
KNeighborsClassifier,0.8858,0.8933,0.8858,0.8863,0.8768,0.8835,0.8768,0.8765,0.75,0.7767,0.75,0.7463,0.9586,smote,250,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'minkowski', 'n_neighbors': 9, 'weights': 'distance'}","KNeighborsClassifier(n_neighbors=9, weights='distance')"
LogisticRegression,0.846,0.8505,0.846,0.8469,0.8841,0.8878,0.8841,0.8849,0.7167,0.7346,0.7167,0.7148,0.9532,smote,250,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 407, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=407)"
SVC,0.848,0.8571,0.848,0.8469,0.8551,0.8598,0.8551,0.8537,0.7167,0.7258,0.7167,0.7147,0.9314,smote,250,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'linear', 'random_state': 392}","SVC(C=10, kernel='linear', probability=True, random_state=392)"
LogisticRegression,0.8531,0.8581,0.8531,0.8517,0.7971,0.7994,0.7971,0.7975,0.7,0.7278,0.7,0.7064,0.9508,smote,250,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 436, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=436)"
SVC,0.8425,0.849,0.8425,0.8397,0.7971,0.8014,0.7971,0.7978,0.7,0.7369,0.7,0.7051,0.9239,smote,250,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'linear', 'random_state': 194}","SVC(C=10, kernel='linear', probability=True, random_state=194)"
DecisionTreeClassifier,0.8768,0.8818,0.8768,0.8766,0.8986,0.9004,0.8986,0.8989,0.7,0.722,0.7,0.7014,0.9449,smote,250,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 357}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=357)"
MLPClassifier,0.8153,0.8212,0.8153,0.8136,0.7971,0.8017,0.7971,0.7981,0.7,0.7357,0.7,0.6975,0.946,smote,250,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 334, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=334)"
MLPClassifier,0.8333,0.8466,0.8333,0.8311,0.8043,0.8124,0.8043,0.8014,0.7,0.7219,0.7,0.6945,0.9551,smote,250,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 896, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=896)"
LogisticRegression,0.8298,0.8358,0.8298,0.8287,0.8551,0.8605,0.8551,0.8553,0.6833,0.6991,0.6833,0.6882,0.9473,smote,250,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 403, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=403)"
SVC,0.8408,0.8532,0.8408,0.8404,0.7899,0.8052,0.7899,0.7864,0.6833,0.7677,0.6833,0.6867,0.925,smote,250,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'linear', 'random_state': 393}","SVC(C=10, kernel='linear', probability=True, random_state=393)"
MLPClassifier,0.8008,0.8105,0.8008,0.799,0.7899,0.8019,0.7899,0.7898,0.6667,0.6796,0.6667,0.6564,0.9331,smote,250,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 335, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=335)"
