Algorithm,Train Accuracy,Train Precision,Train Recall,Train F1 Score,Test Accuracy,Test Precision,Test Recall,Test F1 Score,Val. Accuracy,Val. Precision,Val. Recall,Val. F1 Score,AUC,Bal. Strategy,SMOTE Instances,Scale,Features,Folds,Hyper Params.,Model
KNeighborsClassifier,0.8387,0.8497,0.8387,0.8415,0.829,0.837,0.829,0.8319,0.8,0.8054,0.8,0.7944,0.9468,smote,5000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 13, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', n_neighbors=13, p=1,
                     weights='distance')"
LogisticRegression,0.7971,0.8102,0.7971,0.7993,0.7955,0.8131,0.7955,0.7977,0.7833,0.7815,0.7833,0.7814,0.9381,smote,5000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 1, 'penalty': 'l2', 'random_state': 581, 'solver': 'lbfgs'}","LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=581)"
DecisionTreeClassifier,0.8364,0.8453,0.8364,0.8394,0.8514,0.8583,0.8514,0.8537,0.7667,0.7663,0.7667,0.7662,0.951,smote,5000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 20, 'random_state': 342}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=20, random_state=342)"
MLPClassifier,0.8194,0.8413,0.8194,0.8193,0.8189,0.8768,0.8189,0.8181,0.7667,0.7906,0.7667,0.7568,0.9451,smote,5000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 309, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=309)"
DecisionTreeClassifier,0.8398,0.8482,0.8398,0.8422,0.8363,0.8452,0.8363,0.8392,0.75,0.7788,0.75,0.7427,0.953,smote,5000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 701}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=701)"
RandomForestClassifier,0.8404,0.8505,0.8404,0.8431,0.839,0.8474,0.839,0.8417,0.75,0.787,0.75,0.7414,0.9519,smote,5000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 384}","RandomForestClassifier(n_estimators=20, random_state=384)"
SVC,0.8008,0.8556,0.8008,0.799,0.7952,0.8511,0.7952,0.7931,0.7167,0.7817,0.7167,0.7017,0.9253,smote,5000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'rbf', 'random_state': 899}","SVC(C=10, probability=True, random_state=899)"
SVC,0.8009,0.8692,0.8009,0.8011,0.8089,0.8749,0.8089,0.8072,0.7,0.7935,0.7,0.7003,0.9212,smote,5000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 0.1, 'kernel': 'linear', 'random_state': 412}","SVC(C=0.1, kernel='linear', probability=True, random_state=412)"
SVC,0.8096,0.8694,0.8096,0.8081,0.8159,0.869,0.8159,0.8124,0.7,0.7391,0.7,0.6949,0.9275,smote,5000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'linear', 'random_state': 824}","SVC(C=10, kernel='linear', probability=True, random_state=824)"
KNeighborsClassifier,0.8361,0.8463,0.8361,0.8388,0.8327,0.8416,0.8327,0.8355,0.6833,0.6796,0.6833,0.6794,0.9461,smote,5000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 13, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', n_neighbors=13, p=1,
                     weights='distance')"
RandomForestClassifier,0.8426,0.8529,0.8426,0.8446,0.831,0.8419,0.831,0.834,0.6833,0.6819,0.6833,0.6779,0.9535,smote,5000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 945}","RandomForestClassifier(n_estimators=20, random_state=945)"
RandomForestClassifier,0.8425,0.852,0.8425,0.8449,0.8297,0.842,0.8297,0.8329,0.6833,0.6807,0.6833,0.6763,0.954,smote,5000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 348}","RandomForestClassifier(n_estimators=20, random_state=348)"
MLPClassifier,0.8172,0.8442,0.8172,0.8173,0.8146,0.8253,0.8146,0.8151,0.6667,0.6647,0.6667,0.6594,0.9436,smote,5000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 823, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=823)"
LogisticRegression,0.8041,0.8187,0.8041,0.8067,0.8149,0.831,0.8149,0.8176,0.6667,0.6647,0.6667,0.6594,0.9379,smote,5000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 1, 'penalty': 'l2', 'random_state': 982, 'solver': 'lbfgs'}","LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=982)"
DecisionTreeClassifier,0.8379,0.8466,0.8379,0.8408,0.8471,0.8544,0.8471,0.8495,0.6667,0.6671,0.6667,0.6572,0.952,smote,5000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 10, 'random_state': 313}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=10, random_state=313)"
LogisticRegression,0.7949,0.8076,0.7949,0.7969,0.7985,0.8102,0.7985,0.8004,0.6167,0.6267,0.6167,0.6181,0.9374,smote,5000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 192, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=192)"
KNeighborsClassifier,0.8373,0.8492,0.8373,0.8392,0.8236,0.8343,0.8236,0.8269,0.6167,0.6113,0.6167,0.6106,0.9463,smote,5000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'}","KNeighborsClassifier(n_neighbors=15, weights='distance')"
MLPClassifier,0.8143,0.8346,0.8143,0.8136,0.7992,0.8596,0.7992,0.7947,0.6,0.6438,0.6,0.5872,0.9465,smote,5000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 846, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=846)"
