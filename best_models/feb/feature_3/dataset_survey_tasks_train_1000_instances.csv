Algorithm,Train Accuracy,Train Precision,Train Recall,Train F1 Score,Test Accuracy,Test Precision,Test Recall,Test F1 Score,Val. Accuracy,Val. Precision,Val. Recall,Val. F1 Score,AUC,Bal. Strategy,SMOTE Instances,Scale,Features,Folds,Hyper Params.,Model
DecisionTreeClassifier,0.8431,0.8532,0.8431,0.8453,0.8282,0.8393,0.8282,0.8314,0.8333,0.8342,0.8333,0.8323,0.9475,smote,1000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 10, 'random_state': 767}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=10, random_state=767)"
RandomForestClassifier,0.8198,0.8317,0.8198,0.8228,0.881,0.8902,0.881,0.8827,0.8167,0.8195,0.8167,0.8148,0.9428,smote,1000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 541}","RandomForestClassifier(n_estimators=20, random_state=541)"
LogisticRegression,0.7993,0.8124,0.7993,0.8023,0.8044,0.8257,0.8044,0.8085,0.8167,0.8157,0.8167,0.8147,0.9363,smote,1000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 843, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=843)"
KNeighborsClassifier,0.8287,0.8377,0.8287,0.8306,0.818,0.8273,0.818,0.8211,0.8167,0.8194,0.8167,0.8142,0.9412,smote,1000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 13, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', n_neighbors=13, p=1,
                     weights='distance')"
SVC,0.8197,0.8282,0.8197,0.8219,0.8078,0.8154,0.8078,0.8106,0.7833,0.7815,0.7833,0.7814,0.8918,smote,1000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 1, 'kernel': 'linear', 'random_state': 168}","SVC(C=1, kernel='linear', probability=True, random_state=168)"
SVC,0.7985,0.8165,0.7985,0.802,0.8231,0.8409,0.8231,0.8265,0.7833,0.7882,0.7833,0.7798,0.8915,smote,1000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 1, 'kernel': 'linear', 'random_state': 730}","SVC(C=1, kernel='linear', probability=True, random_state=730)"
MLPClassifier,0.8023,0.8207,0.8023,0.8035,0.7755,0.7926,0.7755,0.7787,0.7833,0.7851,0.7833,0.7736,0.939,smote,1000,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 519, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=519)"
LogisticRegression,0.7823,0.7924,0.7823,0.7842,0.784,0.787,0.784,0.7851,0.7667,0.7878,0.7667,0.7665,0.9367,smote,1000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 5, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=5)"
SVC,0.801,0.8154,0.801,0.8036,0.8044,0.8137,0.8044,0.8071,0.7667,0.7668,0.7667,0.7655,0.8866,smote,1000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 1, 'kernel': 'linear', 'random_state': 795}","SVC(C=1, kernel='linear', probability=True, random_state=795)"
RandomForestClassifier,0.8418,0.8514,0.8418,0.8438,0.8435,0.8477,0.8435,0.8449,0.75,0.7781,0.75,0.7469,0.947,smote,1000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 562}","RandomForestClassifier(n_estimators=20, random_state=562)"
LogisticRegression,0.7883,0.799,0.7883,0.7903,0.7908,0.805,0.7908,0.794,0.75,0.7528,0.75,0.7465,0.9385,smote,1000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 1, 'penalty': 'l2', 'random_state': 123, 'solver': 'lbfgs'}","LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=123)"
DecisionTreeClassifier,0.824,0.8354,0.824,0.8259,0.8588,0.864,0.8588,0.86,0.75,0.7714,0.75,0.7425,0.9485,smote,1000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 906}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=906)"
MLPClassifier,0.8108,0.8337,0.8108,0.8112,0.7925,0.8025,0.7925,0.792,0.7167,0.7233,0.7167,0.7119,0.9435,smote,1000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 93, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=93)"
KNeighborsClassifier,0.8244,0.8402,0.8244,0.8268,0.8503,0.8587,0.8503,0.8527,0.7167,0.7215,0.7167,0.7112,0.9413,smote,1000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 13, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', n_neighbors=13, p=1,
                     weights='distance')"
DecisionTreeClassifier,0.8465,0.8557,0.8465,0.8493,0.835,0.8439,0.835,0.8377,0.7,0.7081,0.7,0.6968,0.9528,smote,1000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 678}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=678)"
RandomForestClassifier,0.8402,0.8502,0.8402,0.843,0.835,0.8474,0.835,0.8381,0.7,0.7162,0.7,0.6948,0.9468,smote,1000,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 10, 'random_state': 444}","RandomForestClassifier(n_estimators=10, random_state=444)"
MLPClassifier,0.8044,0.8292,0.8044,0.8048,0.801,0.8442,0.801,0.7998,0.6667,0.7169,0.6667,0.6461,0.9398,smote,1000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 194, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=194)"
KNeighborsClassifier,0.8295,0.84,0.8295,0.832,0.8197,0.8464,0.8197,0.8213,0.65,0.6719,0.65,0.6444,0.9412,smote,1000,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'}","KNeighborsClassifier(n_neighbors=13, weights='distance')"
