Algorithm;Train Accuracy;Train Precision;Train Recall;Train F1 Score;Test Accuracy;Test Precision;Test Recall;Test F1 Score;Val. Accuracy;Val. Precision;Val. Recall;Val. F1 Score;AUC;Bal. Strategy;SMOTE Instances;Scale;Features;Folds;Hyper Params.;Model
RandomForestClassifier;0.8309;0.8395;0.8309;0.8305;0.7826;0.8105;0.7826;0.7848;0.7833;0.7908;0.7833;0.7764;0.9408;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 904};RandomForestClassifier(n_estimators=20, random_state=904)
SVC;0.7294;0.7641;0.7294;0.7307;0.8116;0.8326;0.8116;0.8143;0.7667;0.7795;0.7667;0.7691;0.869;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 864};SVC(C=10, probability=True, random_state=864)
SVC;0.7326;0.7662;0.7326;0.7323;0.7971;0.7961;0.7971;0.7894;0.7667;0.7795;0.7667;0.7691;0.8686;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 647};SVC(C=10, probability=True, random_state=647)
SVC;0.7328;0.7688;0.7328;0.7337;0.7826;0.8056;0.7826;0.782;0.7667;0.7795;0.7667;0.7691;0.87;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 647};SVC(C=10, probability=True, random_state=647)
SVC;0.7376;0.7733;0.7376;0.7369;0.7971;0.7994;0.7971;0.7964;0.7667;0.7795;0.7667;0.7691;0.8685;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 647};SVC(C=10, probability=True, random_state=647)
SVC;0.7294;0.7626;0.7294;0.7297;0.8406;0.8613;0.8406;0.844;0.7667;0.7795;0.7667;0.7691;0.8621;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 64};SVC(C=10, probability=True, random_state=64)
SVC;0.7358;0.769;0.7358;0.7345;0.7971;0.8354;0.7971;0.8014;0.7667;0.7795;0.7667;0.7691;0.8742;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 64};SVC(C=10, probability=True, random_state=64)
SVC;0.7328;0.7724;0.7328;0.7321;0.7536;0.7807;0.7536;0.7595;0.7667;0.7795;0.7667;0.7691;0.868;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 864};SVC(C=10, probability=True, random_state=864)
SVC;0.7247;0.7608;0.7247;0.7255;0.8986;0.9049;0.8986;0.8999;0.7667;0.7866;0.7667;0.7689;0.8606;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 64};SVC(C=10, probability=True, random_state=64)
RandomForestClassifier;0.7971;0.8037;0.7971;0.7969;0.7971;0.8098;0.7971;0.797;0.7667;0.775;0.7667;0.7631;0.9359;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 752};RandomForestClassifier(n_estimators=20, random_state=752)
RandomForestClassifier;0.8228;0.8307;0.8228;0.8232;0.7681;0.7811;0.7681;0.7717;0.7667;0.7665;0.7667;0.7624;0.9468;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 10, 'random_state': 899};RandomForestClassifier(n_estimators=10, random_state=899)
MLPClassifier;0.723;0.751;0.723;0.7234;0.8841;0.8861;0.8841;0.8831;0.75;0.7747;0.75;0.753;0.8855;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 160, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=160)
MLPClassifier;0.7214;0.7548;0.7214;0.7213;0.8551;0.8683;0.8551;0.857;0.75;0.7747;0.75;0.753;0.8892;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 661, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=661)
MLPClassifier;0.7391;0.7693;0.7391;0.7399;0.7391;0.7531;0.7391;0.7409;0.75;0.7747;0.75;0.753;0.8888;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 661, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=661)
SVC;0.7262;0.7619;0.7262;0.7259;0.8406;0.8537;0.8406;0.8417;0.75;0.7667;0.75;0.7529;0.8704;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 864};SVC(C=10, probability=True, random_state=864)
SVC;0.7312;0.7651;0.7312;0.7307;0.7826;0.8087;0.7826;0.7849;0.75;0.7667;0.75;0.7529;0.8667;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 647};SVC(C=10, probability=True, random_state=647)
SVC;0.7279;0.7648;0.7279;0.727;0.8116;0.8299;0.8116;0.8156;0.75;0.7667;0.75;0.7529;0.8687;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 647};SVC(C=10, probability=True, random_state=647)
SVC;0.7278;0.7612;0.7278;0.7271;0.7971;0.806;0.7971;0.7988;0.75;0.7667;0.75;0.7529;0.8608;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 647};SVC(C=10, probability=True, random_state=647)
SVC;0.7199;0.7571;0.7199;0.7183;0.8551;0.8866;0.8551;0.8589;0.75;0.7667;0.75;0.7529;0.8583;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 864};SVC(C=10, probability=True, random_state=864)
SVC;0.72;0.7554;0.72;0.7194;0.8696;0.8892;0.8696;0.871;0.75;0.7667;0.75;0.7529;0.8635;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 647};SVC(C=10, probability=True, random_state=647)
SVC;0.7246;0.762;0.7246;0.7252;0.8551;0.8874;0.8551;0.858;0.75;0.7667;0.75;0.7529;0.8657;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 64};SVC(C=10, probability=True, random_state=64)
SVC;0.7263;0.7642;0.7263;0.7258;0.7826;0.8024;0.7826;0.7834;0.75;0.7667;0.75;0.7529;0.8693;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 864};SVC(C=10, probability=True, random_state=864)
SVC;0.7198;0.7588;0.7198;0.7198;0.8116;0.8207;0.8116;0.8126;0.75;0.7667;0.75;0.7529;0.8634;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 64};SVC(C=10, probability=True, random_state=64)
SVC;0.7423;0.7759;0.7423;0.7418;0.7246;0.74;0.7246;0.7284;0.75;0.7667;0.75;0.7529;0.8761;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 64};SVC(C=10, probability=True, random_state=64)
SVC;0.7423;0.78;0.7423;0.7419;0.7101;0.7485;0.7101;0.7107;0.75;0.7667;0.75;0.7529;0.8681;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 64};SVC(C=10, probability=True, random_state=64)
SVC;0.7359;0.7762;0.7359;0.7344;0.7536;0.7675;0.7536;0.7564;0.75;0.7667;0.75;0.7529;0.8741;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 647};SVC(C=10, probability=True, random_state=647)
SVC;0.7342;0.7667;0.7342;0.7345;0.7826;0.8029;0.7826;0.7846;0.75;0.7583;0.75;0.7521;0.8662;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 64};SVC(C=10, probability=True, random_state=64)
DecisionTreeClassifier;0.805;0.8166;0.805;0.8052;0.7971;0.7996;0.7971;0.7975;0.75;0.7671;0.75;0.7513;0.8981;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 39};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=39)
MLPClassifier;0.7326;0.7589;0.7326;0.7336;0.7681;0.8136;0.7681;0.7594;0.75;0.7593;0.75;0.7512;0.8778;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 160, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=160)
SVC;0.7295;0.7652;0.7295;0.7288;0.7681;0.769;0.7681;0.7664;0.75;0.7593;0.75;0.7512;0.8703;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 864};SVC(C=10, probability=True, random_state=864)
KNeighborsClassifier;0.7713;0.7883;0.7713;0.772;0.6812;0.741;0.6812;0.6827;0.75;0.77;0.75;0.7511;0.9071;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
MLPClassifier;0.7311;0.7547;0.7311;0.7289;0.7826;0.8116;0.7826;0.7881;0.75;0.7651;0.75;0.7502;0.8877;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 661, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=661)
MLPClassifier;0.7391;0.7646;0.7391;0.736;0.8261;0.828;0.8261;0.8259;0.75;0.7651;0.75;0.7502;0.8873;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 661, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=661)
MLPClassifier;0.7245;0.7515;0.7245;0.7251;0.8261;0.8274;0.8261;0.8259;0.75;0.7651;0.75;0.7502;0.8858;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 587, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=587)
MLPClassifier;0.741;0.766;0.741;0.7375;0.7971;0.8091;0.7971;0.7996;0.75;0.7651;0.75;0.7502;0.8849;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 587, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=587)
RandomForestClassifier;0.8244;0.833;0.8244;0.8247;0.8116;0.8103;0.8116;0.8102;0.75;0.7557;0.75;0.7487;0.9462;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 904};RandomForestClassifier(n_estimators=20, random_state=904)
MLPClassifier;0.731;0.7595;0.731;0.7313;0.7971;0.8341;0.7971;0.803;0.75;0.7655;0.75;0.7476;0.891;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 587, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=587)
KNeighborsClassifier;0.778;0.7888;0.778;0.7784;0.8116;0.812;0.8116;0.8115;0.75;0.7568;0.75;0.7468;0.9119;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=7, weights='distance')
RandomForestClassifier;0.826;0.8325;0.826;0.8261;0.8406;0.8397;0.8406;0.8399;0.75;0.7589;0.75;0.7458;0.9363;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 899};RandomForestClassifier(n_estimators=20, random_state=899)
RandomForestClassifier;0.8036;0.8182;0.8036;0.805;0.7246;0.7321;0.7246;0.7274;0.75;0.7617;0.75;0.7454;0.9441;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 904};RandomForestClassifier(n_estimators=20, random_state=904)
RandomForestClassifier;0.826;0.8326;0.826;0.8266;0.8406;0.8466;0.8406;0.8406;0.75;0.7617;0.75;0.7454;0.9363;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 10, 'random_state': 752};RandomForestClassifier(n_estimators=10, random_state=752)
RandomForestClassifier;0.818;0.8257;0.818;0.8186;0.8261;0.8273;0.8261;0.8259;0.75;0.7514;0.75;0.7453;0.9455;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 752};RandomForestClassifier(n_estimators=20, random_state=752)
RandomForestClassifier;0.8164;0.8214;0.8164;0.8162;0.7971;0.7981;0.7971;0.7974;0.75;0.7514;0.75;0.7453;0.9459;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 899};RandomForestClassifier(n_estimators=20, random_state=899)
RandomForestClassifier;0.7987;0.8131;0.7987;0.8005;0.8696;0.8721;0.8696;0.8664;0.75;0.7469;0.75;0.7443;0.9362;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 10, 'random_state': 899};RandomForestClassifier(n_estimators=10, random_state=899)
RandomForestClassifier;0.8163;0.8267;0.8163;0.8148;0.8261;0.8313;0.8261;0.8264;0.75;0.7469;0.75;0.7443;0.9491;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 752};RandomForestClassifier(n_estimators=20, random_state=752)
RandomForestClassifier;0.8341;0.8439;0.8341;0.8345;0.7826;0.7877;0.7826;0.7842;0.75;0.7495;0.75;0.7411;0.9472;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 5, 'random_state': 904};RandomForestClassifier(n_estimators=5, random_state=904)
MLPClassifier;0.7247;0.7505;0.7247;0.7245;0.8261;0.8305;0.8261;0.8272;0.7333;0.7642;0.7333;0.7377;0.8805;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 661, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=661)
MLPClassifier;0.7375;0.7628;0.7375;0.738;0.7826;0.813;0.7826;0.7789;0.7333;0.7642;0.7333;0.7377;0.89;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 661, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=661)
MLPClassifier;0.7311;0.7628;0.7311;0.7311;0.8116;0.8107;0.8116;0.8109;0.7333;0.7642;0.7333;0.7377;0.8837;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 661, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=661)
DecisionTreeClassifier;0.8147;0.8274;0.8147;0.8165;0.7971;0.8123;0.7971;0.7997;0.7333;0.747;0.7333;0.7373;0.9261;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 20, 'random_state': 874};DecisionTreeClassifier(max_depth=10, min_samples_leaf=20, random_state=874)
DecisionTreeClassifier;0.7955;0.8077;0.7955;0.7972;0.8406;0.8413;0.8406;0.8401;0.7333;0.747;0.7333;0.7373;0.9079;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 20, 'random_state': 39};DecisionTreeClassifier(max_depth=10, min_samples_leaf=20, random_state=39)
DecisionTreeClassifier;0.8084;0.8224;0.8084;0.8092;0.8261;0.8462;0.8261;0.8276;0.7333;0.747;0.7333;0.7373;0.9171;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 20, 'random_state': 762};DecisionTreeClassifier(max_depth=10, min_samples_leaf=20, random_state=762)
DecisionTreeClassifier;0.7891;0.797;0.7891;0.7906;0.8551;0.8746;0.8551;0.858;0.7333;0.747;0.7333;0.7373;0.9077;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 20, 'random_state': 762};DecisionTreeClassifier(max_depth=10, min_samples_leaf=20, random_state=762)
SVC;0.7392;0.7731;0.7392;0.7396;0.6812;0.7044;0.6812;0.6866;0.7333;0.7454;0.7333;0.736;0.8719;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 647};SVC(C=10, probability=True, random_state=647)
SVC;0.7344;0.7712;0.7344;0.734;0.7536;0.7654;0.7536;0.757;0.7333;0.7658;0.7333;0.736;0.8756;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 864};SVC(C=10, probability=True, random_state=864)
SVC;0.7279;0.7656;0.7279;0.7293;0.8696;0.8769;0.8696;0.8714;0.7333;0.7454;0.7333;0.736;0.8631;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 864};SVC(C=10, probability=True, random_state=864)
SVC;0.7341;0.7706;0.7341;0.7352;0.7971;0.8011;0.7971;0.7981;0.7333;0.7572;0.7333;0.7359;0.869;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 64};SVC(C=10, probability=True, random_state=64)
MLPClassifier;0.7132;0.7392;0.7132;0.7119;0.8696;0.8774;0.8696;0.871;0.7333;0.7639;0.7333;0.7357;0.8755;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 661, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=661)
MLPClassifier;0.7343;0.7612;0.7343;0.7341;0.7826;0.796;0.7826;0.785;0.7333;0.7639;0.7333;0.7357;0.8896;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 160, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=160)
KNeighborsClassifier;0.7778;0.7875;0.7778;0.7772;0.7681;0.8145;0.7681;0.7736;0.7333;0.7482;0.7333;0.735;0.9115;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(weights='distance')
KNeighborsClassifier;0.7876;0.7996;0.7876;0.7879;0.7826;0.8004;0.7826;0.7866;0.7333;0.7458;0.7333;0.7347;0.9033;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(weights='distance')
RandomForestClassifier;0.8293;0.8364;0.8293;0.8303;0.8116;0.8138;0.8116;0.8125;0.7333;0.7494;0.7333;0.7345;0.9448;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 899};RandomForestClassifier(n_estimators=20, random_state=899)
RandomForestClassifier;0.8083;0.8161;0.8083;0.8085;0.8116;0.812;0.8116;0.8115;0.7333;0.7436;0.7333;0.7342;0.9398;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 5, 'random_state': 899};RandomForestClassifier(n_estimators=5, random_state=899)
MLPClassifier;0.7376;0.7628;0.7376;0.7361;0.7826;0.8009;0.7826;0.7837;0.7333;0.7487;0.7333;0.7341;0.889;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 587, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=587)
MLPClassifier;0.7345;0.761;0.7345;0.7335;0.7971;0.8021;0.7971;0.7962;0.7333;0.7487;0.7333;0.7341;0.885;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 587, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=587)
MLPClassifier;0.7375;0.7675;0.7375;0.738;0.7971;0.8011;0.7971;0.7973;0.7333;0.7487;0.7333;0.7341;0.8984;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 587, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=587)
DecisionTreeClassifier;0.8198;0.827;0.8198;0.8202;0.7971;0.8013;0.7971;0.7981;0.7333;0.7556;0.7333;0.7339;0.9226;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 762};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=762)
RandomForestClassifier;0.826;0.8346;0.826;0.8254;0.7826;0.7801;0.7826;0.7804;0.7333;0.7556;0.7333;0.7339;0.9409;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 904};RandomForestClassifier(n_estimators=20, random_state=904)
RandomForestClassifier;0.8293;0.8351;0.8293;0.8297;0.7971;0.8199;0.7971;0.802;0.7333;0.7556;0.7333;0.7339;0.9487;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 899};RandomForestClassifier(n_estimators=20, random_state=899)
KNeighborsClassifier;0.7648;0.7754;0.7648;0.7662;0.8406;0.8391;0.8406;0.8396;0.7333;0.7369;0.7333;0.7329;0.911;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=7, weights='distance')
MLPClassifier;0.7341;0.7642;0.7341;0.7337;0.7971;0.8111;0.7971;0.7998;0.7333;0.753;0.7333;0.7325;0.8853;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 160, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=160)
MLPClassifier;0.731;0.7616;0.731;0.7296;0.7826;0.7906;0.7826;0.7827;0.7333;0.753;0.7333;0.7325;0.885;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 661, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=661)
MLPClassifier;0.7245;0.7531;0.7245;0.7243;0.8116;0.814;0.8116;0.8094;0.7333;0.753;0.7333;0.7325;0.8823;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 587, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=587)
MLPClassifier;0.7216;0.7513;0.7216;0.7222;0.7971;0.7943;0.7971;0.7939;0.7333;0.753;0.7333;0.7325;0.8845;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 160, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=160)
DecisionTreeClassifier;0.81;0.8238;0.81;0.8118;0.7681;0.7667;0.7681;0.7667;0.7333;0.7516;0.7333;0.7324;0.9191;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 874};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=874)
MLPClassifier;0.7344;0.7581;0.7344;0.7339;0.8116;0.8182;0.8116;0.8115;0.7333;0.7467;0.7333;0.7323;0.8914;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 160, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=160)
KNeighborsClassifier;0.7568;0.7762;0.7568;0.758;0.8261;0.8291;0.8261;0.8265;0.7333;0.7448;0.7333;0.7323;0.9122;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=7, weights='distance')
KNeighborsClassifier;0.7842;0.7978;0.7842;0.7847;0.8261;0.8381;0.8261;0.8277;0.7333;0.7448;0.7333;0.7323;0.9083;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 13, 'weights': 'distance'};"KNeighborsClassifier(metric='manhattan', n_neighbors=13, p=1,
                     weights='distance')"
KNeighborsClassifier;0.7552;0.7671;0.7552;0.7557;0.8551;0.8874;0.8551;0.858;0.7333;0.7448;0.7333;0.7323;0.9043;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'};"KNeighborsClassifier(metric='manhattan', n_neighbors=11, p=1,
                     weights='distance')"
KNeighborsClassifier;0.7423;0.7551;0.7423;0.7426;0.8696;0.8713;0.8696;0.8702;0.7333;0.7448;0.7333;0.7323;0.9014;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 9, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', n_neighbors=9, p=1, weights='distance')
KNeighborsClassifier;0.7618;0.772;0.7618;0.7625;0.8261;0.8234;0.8261;0.824;0.7333;0.7448;0.7333;0.7323;0.9073;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'};"KNeighborsClassifier(metric='manhattan', n_neighbors=11, p=1,
                     weights='distance')"
DecisionTreeClassifier;0.805;0.8168;0.805;0.806;0.7971;0.7978;0.7971;0.7922;0.7333;0.7452;0.7333;0.7317;0.9185;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 39};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=39)
RandomForestClassifier;0.8131;0.828;0.8131;0.8135;0.8551;0.875;0.8551;0.8557;0.7333;0.7495;0.7333;0.7314;0.9424;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 899};RandomForestClassifier(n_estimators=20, random_state=899)
RandomForestClassifier;0.8277;0.832;0.8277;0.8282;0.7971;0.8028;0.7971;0.798;0.7333;0.7423;0.7333;0.7313;0.944;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 10, 'random_state': 904};RandomForestClassifier(n_estimators=10, random_state=904)
MLPClassifier;0.7199;0.7479;0.7199;0.7194;0.8406;0.8452;0.8406;0.8385;0.7333;0.7429;0.7333;0.7312;0.8887;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 160, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=160)
RandomForestClassifier;0.8004;0.8163;0.8004;0.8018;0.8696;0.8736;0.8696;0.8691;0.7333;0.7381;0.7333;0.7312;0.9402;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 904};RandomForestClassifier(n_estimators=20, random_state=904)
RandomForestClassifier;0.8099;0.815;0.8099;0.8104;0.8551;0.8594;0.8551;0.8565;0.7333;0.7381;0.7333;0.7312;0.9398;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 752};RandomForestClassifier(n_estimators=20, random_state=752)
KNeighborsClassifier;0.7891;0.799;0.7891;0.7898;0.7826;0.7877;0.7826;0.7843;0.7333;0.7348;0.7333;0.7302;0.9086;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(weights='distance')
RandomForestClassifier;0.8502;0.8552;0.8502;0.8497;0.7101;0.7105;0.7101;0.7101;0.7333;0.7324;0.7333;0.73;0.9471;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 752};RandomForestClassifier(n_estimators=20, random_state=752)
KNeighborsClassifier;0.7809;0.7904;0.7809;0.7806;0.7681;0.7704;0.7681;0.769;0.7333;0.7397;0.7333;0.7299;0.9142;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=7, weights='distance')
KNeighborsClassifier;0.76;0.7706;0.76;0.7616;0.8696;0.874;0.8696;0.8707;0.7333;0.743;0.7333;0.7287;0.9084;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=7, weights='distance')
RandomForestClassifier;0.8133;0.8267;0.8133;0.8132;0.7536;0.7755;0.7536;0.7581;0.7333;0.743;0.7333;0.7281;0.947;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 899};RandomForestClassifier(n_estimators=20, random_state=899)
RandomForestClassifier;0.8132;0.8202;0.8132;0.8141;0.7971;0.8413;0.7971;0.801;0.7167;0.7444;0.7167;0.7214;0.9433;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 752};RandomForestClassifier(n_estimators=20, random_state=752)
MLPClassifier;0.7359;0.7616;0.7359;0.7345;0.7971;0.8016;0.7971;0.7985;0.7167;0.754;0.7167;0.7207;0.892;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 661, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=661)
SVC;0.7424;0.7748;0.7424;0.7436;0.7246;0.7402;0.7246;0.7269;0.7167;0.7457;0.7167;0.7202;0.8784;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 864};SVC(C=10, probability=True, random_state=864)
SVC;0.7376;0.776;0.7376;0.7377;0.6957;0.6984;0.6957;0.6963;0.7167;0.7457;0.7167;0.7202;0.8766;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 64};SVC(C=10, probability=True, random_state=64)
SVC;0.7345;0.7682;0.7345;0.7336;0.8116;0.8135;0.8116;0.8117;0.7167;0.7457;0.7167;0.7202;0.8715;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 864};SVC(C=10, probability=True, random_state=864)
SVC;0.7327;0.7676;0.7327;0.7316;0.7971;0.7956;0.7971;0.7956;0.7167;0.7457;0.7167;0.7202;0.8657;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 647};SVC(C=10, probability=True, random_state=647)
DecisionTreeClassifier;0.8083;0.8211;0.8083;0.8091;0.913;0.9177;0.913;0.9142;0.7167;0.7373;0.7167;0.7199;0.9209;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 39};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=39)
DecisionTreeClassifier;0.81;0.8222;0.81;0.8113;0.8551;0.8556;0.8551;0.855;0.7167;0.7373;0.7167;0.7199;0.9073;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 874};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=874)
DecisionTreeClassifier;0.8196;0.8338;0.8196;0.8213;0.7971;0.7936;0.7971;0.7936;0.7167;0.7373;0.7167;0.7199;0.9138;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 762};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=762)
KNeighborsClassifier;0.7778;0.787;0.7778;0.7781;0.7681;0.7766;0.7681;0.7702;0.7167;0.7327;0.7167;0.7196;0.9073;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=7, weights='distance')
DecisionTreeClassifier;0.8003;0.8161;0.8003;0.8023;0.7826;0.7855;0.7826;0.7838;0.7167;0.7319;0.7167;0.7195;0.9132;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 20, 'random_state': 762};DecisionTreeClassifier(max_depth=10, min_samples_leaf=20, random_state=762)
DecisionTreeClassifier;0.8213;0.8332;0.8213;0.8222;0.7681;0.8047;0.7681;0.7725;0.7167;0.7447;0.7167;0.7194;0.9173;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 39};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=39)
LogisticRegression;0.6943;0.72;0.6943;0.694;0.7826;0.7869;0.7826;0.7831;0.7167;0.7232;0.7167;0.7187;0.827;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 94, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=94)"
LogisticRegression;0.7085;0.7311;0.7085;0.7088;0.5797;0.5879;0.5797;0.578;0.7167;0.7232;0.7167;0.7187;0.8347;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 707, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=707)"
LogisticRegression;0.6859;0.7077;0.6859;0.6858;0.7681;0.7935;0.7681;0.7695;0.7167;0.7232;0.7167;0.7187;0.815;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 707, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=707)"
LogisticRegression;0.6942;0.7144;0.6942;0.6925;0.7391;0.7461;0.7391;0.7408;0.7167;0.7232;0.7167;0.7187;0.8299;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 94, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=94)"
LogisticRegression;0.694;0.715;0.694;0.6939;0.6667;0.6887;0.6667;0.6646;0.7167;0.7232;0.7167;0.7187;0.8387;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 203, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=203)"
LogisticRegression;0.7085;0.7288;0.7085;0.7087;0.6667;0.7184;0.6667;0.6564;0.7167;0.7232;0.7167;0.7187;0.8308;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 94, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=94)"
LogisticRegression;0.6925;0.7108;0.6925;0.692;0.7101;0.749;0.7101;0.7151;0.7167;0.7232;0.7167;0.7187;0.8295;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 707, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=707)"
KNeighborsClassifier;0.7584;0.7768;0.7584;0.7611;0.7826;0.7899;0.7826;0.7846;0.7167;0.7333;0.7167;0.7175;0.9031;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', n_neighbors=7, p=1, weights='distance')
DecisionTreeClassifier;0.826;0.8387;0.826;0.827;0.7681;0.77;0.7681;0.7621;0.7167;0.7377;0.7167;0.7173;0.9132;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 874};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=874)
MLPClassifier;0.7423;0.7654;0.7423;0.7392;0.7536;0.756;0.7536;0.754;0.7167;0.7408;0.7167;0.7172;0.8953;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 160, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=160)
MLPClassifier;0.7373;0.7635;0.7373;0.7365;0.7536;0.8167;0.7536;0.7572;0.7167;0.7408;0.7167;0.7172;0.8912;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 160, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=160)
MLPClassifier;0.7359;0.7602;0.7359;0.7333;0.7536;0.7767;0.7536;0.7589;0.7167;0.7408;0.7167;0.7172;0.8931;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 160, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=160)
MLPClassifier;0.7328;0.7598;0.7328;0.7306;0.8116;0.8234;0.8116;0.8121;0.7167;0.7365;0.7167;0.7165;0.8847;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 587, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=587)
MLPClassifier;0.7311;0.7552;0.7311;0.7292;0.7681;0.7788;0.7681;0.7712;0.7167;0.7365;0.7167;0.7165;0.8888;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 587, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=587)
DecisionTreeClassifier;0.8276;0.8382;0.8276;0.8287;0.7101;0.7143;0.7101;0.7115;0.7167;0.7442;0.7167;0.716;0.9223;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 39};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=39)
KNeighborsClassifier;0.7794;0.7935;0.7794;0.7805;0.8116;0.8103;0.8116;0.8102;0.7167;0.7227;0.7167;0.7157;0.9118;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'};"KNeighborsClassifier(metric='manhattan', n_neighbors=11, p=1,
                     weights='distance')"
KNeighborsClassifier;0.7746;0.7879;0.7746;0.7746;0.7971;0.8586;0.7971;0.8017;0.7167;0.7227;0.7167;0.7157;0.9123;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=7, weights='distance')
KNeighborsClassifier;0.7664;0.7755;0.7664;0.7673;0.8406;0.8383;0.8406;0.8376;0.7167;0.7227;0.7167;0.7157;0.9029;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 9, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', n_neighbors=9, p=1, weights='distance')
KNeighborsClassifier;0.7859;0.798;0.7859;0.7863;0.8116;0.8335;0.8116;0.8129;0.7167;0.7227;0.7167;0.7157;0.9088;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(weights='distance')
RandomForestClassifier;0.8116;0.8214;0.8116;0.8117;0.7681;0.7719;0.7681;0.769;0.7167;0.7188;0.7167;0.7155;0.9469;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 752};RandomForestClassifier(n_estimators=20, random_state=752)
KNeighborsClassifier;0.7537;0.7687;0.7537;0.7546;0.8841;0.9008;0.8841;0.883;0.7167;0.7317;0.7167;0.7143;0.9031;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=7, weights='distance')
KNeighborsClassifier;0.7521;0.7652;0.7521;0.7535;0.7536;0.7622;0.7536;0.7557;0.7167;0.7317;0.7167;0.7143;0.9071;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'};"KNeighborsClassifier(metric='manhattan', n_neighbors=11, p=1,
                     weights='distance')"
RandomForestClassifier;0.8101;0.8224;0.8101;0.8109;0.7971;0.8061;0.7971;0.7993;0.7167;0.7333;0.7167;0.7135;0.9396;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 904};RandomForestClassifier(n_estimators=20, random_state=904)
KNeighborsClassifier;0.7762;0.7932;0.7762;0.7766;0.7246;0.7262;0.7246;0.7247;0.7167;0.7257;0.7167;0.7118;0.9096;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 9, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=9, weights='distance')
LogisticRegression;0.7054;0.7225;0.7054;0.7047;0.6087;0.6202;0.6087;0.6077;0.7;0.7159;0.7;0.7052;0.8296;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 707, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=707)"
DecisionTreeClassifier;0.81;0.8278;0.81;0.8117;0.8406;0.8623;0.8406;0.8395;0.7;0.7256;0.7;0.705;0.9117;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 10, 'random_state': 762};DecisionTreeClassifier(max_depth=10, min_samples_leaf=10, random_state=762)
DecisionTreeClassifier;0.8228;0.8393;0.8228;0.8239;0.7826;0.8175;0.7826;0.7798;0.7;0.7207;0.7;0.7046;0.9186;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 20, 'random_state': 39};DecisionTreeClassifier(max_depth=10, min_samples_leaf=20, random_state=39)
DecisionTreeClassifier;0.8051;0.8207;0.8051;0.8068;0.8116;0.8288;0.8116;0.8158;0.7;0.7263;0.7;0.7029;0.9175;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 39};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=39)
DecisionTreeClassifier;0.8309;0.8427;0.8309;0.8325;0.7536;0.7654;0.7536;0.7543;0.7;0.7263;0.7;0.7029;0.9197;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 874};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=874)
DecisionTreeClassifier;0.8132;0.8272;0.8132;0.8151;0.8261;0.8296;0.8261;0.8255;0.7;0.7263;0.7;0.7029;0.9163;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 39};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=39)
KNeighborsClassifier;0.7922;0.8015;0.7922;0.7923;0.7971;0.8138;0.7971;0.799;0.7;0.72;0.7;0.7026;0.9134;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
DecisionTreeClassifier;0.8052;0.8166;0.8052;0.8062;0.7826;0.8097;0.7826;0.7821;0.7;0.7036;0.7;0.7015;0.9102;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 20, 'random_state': 762};DecisionTreeClassifier(max_depth=10, min_samples_leaf=20, random_state=762)
MLPClassifier;0.7375;0.7605;0.7375;0.7348;0.8406;0.8534;0.8406;0.841;0.7;0.7238;0.7;0.7014;0.8926;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 587, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=587)
KNeighborsClassifier;0.7618;0.7773;0.7618;0.7631;0.7971;0.8132;0.7971;0.799;0.7;0.7302;0.7;0.7011;0.9087;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'};"KNeighborsClassifier(metric='manhattan', n_neighbors=11, p=1,
                     weights='distance')"
LogisticRegression;0.6957;0.7178;0.6957;0.6946;0.6957;0.7184;0.6957;0.6982;0.7;0.7028;0.7;0.7011;0.8283;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 94, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=94)"
LogisticRegression;0.7102;0.7313;0.7102;0.7088;0.5942;0.6431;0.5942;0.5805;0.7;0.7028;0.7;0.7011;0.8305;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 203, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=203)"
LogisticRegression;0.7004;0.7248;0.7004;0.7008;0.7101;0.7298;0.7101;0.7126;0.7;0.7028;0.7;0.7011;0.8274;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 707, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=707)"
LogisticRegression;0.7053;0.7272;0.7053;0.7052;0.6522;0.6801;0.6522;0.6541;0.7;0.7028;0.7;0.7011;0.8264;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 203, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=203)"
LogisticRegression;0.6989;0.7172;0.6989;0.6988;0.7101;0.7456;0.7101;0.7093;0.7;0.7028;0.7;0.7011;0.8209;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 94, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=94)"
LogisticRegression;0.6958;0.7187;0.6958;0.6937;0.6957;0.708;0.6957;0.6974;0.7;0.7028;0.7;0.7011;0.8185;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 94, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=94)"
LogisticRegression;0.7054;0.7297;0.7054;0.7071;0.7101;0.7172;0.7101;0.7105;0.7;0.7028;0.7;0.7011;0.8247;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 707, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=707)"
LogisticRegression;0.6941;0.7167;0.6941;0.6918;0.7536;0.7685;0.7536;0.7555;0.7;0.7028;0.7;0.7011;0.8221;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 203, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=203)"
LogisticRegression;0.6956;0.7147;0.6956;0.696;0.7246;0.7892;0.7246;0.7166;0.7;0.7028;0.7;0.7011;0.8231;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 707, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=707)"
LogisticRegression;0.7133;0.7328;0.7133;0.7131;0.6377;0.6692;0.6377;0.6434;0.7;0.7028;0.7;0.7011;0.8293;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 94, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=94)"
LogisticRegression;0.6861;0.71;0.6861;0.6846;0.7681;0.771;0.7681;0.7679;0.7;0.7028;0.7;0.7011;0.8213;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 203, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=203)"
LogisticRegression;0.6989;0.7217;0.6989;0.6991;0.6812;0.693;0.6812;0.677;0.7;0.7028;0.7;0.7011;0.8317;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 94, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=94)"
LogisticRegression;0.6973;0.7206;0.6973;0.6985;0.6812;0.6997;0.6812;0.6827;0.7;0.7028;0.7;0.7011;0.8298;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 707, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=707)"
LogisticRegression;0.6892;0.7099;0.6892;0.6881;0.7826;0.8;0.7826;0.7877;0.7;0.7028;0.7;0.7011;0.813;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 707, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=707)"
LogisticRegression;0.6861;0.7094;0.6861;0.6843;0.7536;0.7552;0.7536;0.7542;0.7;0.7028;0.7;0.7011;0.8191;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 203, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=203)"
LogisticRegression;0.699;0.724;0.699;0.697;0.6812;0.6935;0.6812;0.6817;0.7;0.7028;0.7;0.7011;0.8223;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 94, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=94)"
LogisticRegression;0.7005;0.7226;0.7005;0.699;0.7101;0.7248;0.7101;0.7088;0.7;0.7028;0.7;0.7011;0.8181;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 203, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=203)"
LogisticRegression;0.6941;0.7131;0.6941;0.6955;0.7101;0.7222;0.7101;0.7016;0.7;0.7028;0.7;0.7011;0.8251;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'penalty': 'l2', 'random_state': 94, 'solver': 'lbfgs'};"LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=94)"
KNeighborsClassifier;0.7763;0.787;0.7763;0.7776;0.8261;0.829;0.8261;0.8244;0.7;0.7111;0.7;0.701;0.917;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(weights='distance')
KNeighborsClassifier;0.7776;0.7899;0.7776;0.7786;0.7681;0.7739;0.7681;0.7704;0.7;0.7111;0.7;0.701;0.9056;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'};"KNeighborsClassifier(metric='manhattan', n_neighbors=11, p=1,
                     weights='distance')"
KNeighborsClassifier;0.7697;0.782;0.7697;0.7712;0.7681;0.7987;0.7681;0.773;0.7;0.7184;0.7;0.6995;0.9035;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(weights='distance')
DecisionTreeClassifier;0.8308;0.8406;0.8308;0.8314;0.7826;0.8046;0.7826;0.7879;0.7;0.7263;0.7;0.6995;0.9183;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 762};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=762)
RandomForestClassifier;0.8165;0.826;0.8165;0.8175;0.8406;0.868;0.8406;0.8426;0.7;0.7045;0.7;0.6984;0.9434;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 904};RandomForestClassifier(n_estimators=20, random_state=904)
RandomForestClassifier;0.8179;0.8268;0.8179;0.8176;0.8116;0.8243;0.8116;0.8143;0.7;0.7032;0.7;0.692;0.9428;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 752};RandomForestClassifier(n_estimators=20, random_state=752)
DecisionTreeClassifier;0.8229;0.8333;0.8229;0.8247;0.7246;0.733;0.7246;0.7254;0.6833;0.7014;0.6833;0.6877;0.9158;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 39};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=39)
KNeighborsClassifier;0.7536;0.7607;0.7536;0.7535;0.7971;0.8036;0.7971;0.7994;0.6833;0.7097;0.6833;0.6872;0.9058;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
RandomForestClassifier;0.8196;0.825;0.8196;0.8201;0.8261;0.8309;0.8261;0.8278;0.6833;0.6951;0.6833;0.6852;0.9388;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 904};RandomForestClassifier(n_estimators=20, random_state=904)
LogisticRegression;0.6925;0.7121;0.6925;0.6933;0.6957;0.7214;0.6957;0.6998;0.6833;0.6882;0.6833;0.685;0.8216;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 707, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=707)"
KNeighborsClassifier;0.7746;0.7845;0.7746;0.7759;0.8406;0.8404;0.8406;0.8402;0.6833;0.7102;0.6833;0.6849;0.9093;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(weights='distance')
DecisionTreeClassifier;0.7972;0.8105;0.7972;0.7973;0.7826;0.7891;0.7826;0.7849;0.6833;0.7111;0.6833;0.6836;0.913;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 762};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=762)
DecisionTreeClassifier;0.8147;0.8227;0.8147;0.8144;0.8696;0.8841;0.8696;0.8721;0.6833;0.7111;0.6833;0.6836;0.912;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 874};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=874)
DecisionTreeClassifier;0.818;0.8274;0.818;0.819;0.8261;0.8275;0.8261;0.8258;0.6833;0.7036;0.6833;0.6833;0.9168;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 874};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=874)
LogisticRegression;0.707;0.7312;0.707;0.7067;0.6667;0.6992;0.6667;0.6735;0.6833;0.6833;0.6833;0.6833;0.8204;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 0.1, 'penalty': 'l2', 'random_state': 203, 'solver': 'lbfgs'};"LogisticRegression(C=0.1, max_iter=100000, multi_class='multinomial',
                   random_state=203)"
LogisticRegression;0.6989;0.7174;0.6989;0.6999;0.6522;0.6566;0.6522;0.6465;0.6833;0.6833;0.6833;0.6833;0.8322;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 203, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=203)"
LogisticRegression;0.6972;0.7184;0.6972;0.697;0.7246;0.7455;0.7246;0.7264;0.6833;0.6833;0.6833;0.6833;0.83;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 0.1, 'penalty': 'l2', 'random_state': 203, 'solver': 'lbfgs'};"LogisticRegression(C=0.1, max_iter=100000, multi_class='multinomial',
                   random_state=203)"
KNeighborsClassifier;0.7744;0.7828;0.7744;0.7753;0.7536;0.7736;0.7536;0.7579;0.6833;0.7241;0.6833;0.6815;0.9104;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', n_neighbors=7, p=1, weights='distance')
RandomForestClassifier;0.8116;0.8166;0.8116;0.8116;0.8116;0.8158;0.8116;0.813;0.6833;0.6869;0.6833;0.6809;0.9388;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 899};RandomForestClassifier(n_estimators=20, random_state=899)
RandomForestClassifier;0.8116;0.8176;0.8116;0.8111;0.8261;0.8234;0.8261;0.824;0.6833;0.6864;0.6833;0.6735;0.9342;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 752};RandomForestClassifier(n_estimators=20, random_state=752)
DecisionTreeClassifier;0.8292;0.8438;0.8292;0.831;0.6667;0.7296;0.6667;0.6741;0.6667;0.7042;0.6667;0.6732;0.9193;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 10, 'random_state': 762};DecisionTreeClassifier(max_depth=10, min_samples_leaf=10, random_state=762)
DecisionTreeClassifier;0.8277;0.8354;0.8277;0.8285;0.7826;0.8143;0.7826;0.7849;0.6667;0.6996;0.6667;0.669;0.9205;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 874};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=874)
DecisionTreeClassifier;0.8003;0.8135;0.8003;0.8015;0.8261;0.8372;0.8261;0.8275;0.65;0.671;0.65;0.6515;0.9086;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 874};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=874)
DecisionTreeClassifier;0.8212;0.8307;0.8212;0.8209;0.7681;0.7925;0.7681;0.7741;0.6333;0.6693;0.6333;0.6381;0.9201;smote;250;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 10, 'random_state': 874};DecisionTreeClassifier(max_depth=10, min_samples_leaf=10, random_state=874)
