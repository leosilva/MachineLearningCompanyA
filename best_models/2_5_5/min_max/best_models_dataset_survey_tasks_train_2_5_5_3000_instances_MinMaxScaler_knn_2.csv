Algorithm;Train Accuracy;Train Precision;Train Recall;Train F1 Score;Test Accuracy;Test Precision;Test Recall;Test F1 Score;Val. Accuracy;Val. Precision;Val. Recall;Val. F1 Score;Bal. Strategy;SMOTE Instances;Scale;Features;Folds;Hyper Params.;Model
KNeighborsClassifier;0.8294;0.8306;0.8294;0.8289;0.8618;0.8627;0.8618;0.8618;0.85;0.8611;0.85;0.8517;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8214;0.8231;0.8214;0.8205;0.8552;0.8544;0.8552;0.8547;0.8333;0.8419;0.8333;0.8353;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8218;0.8268;0.8218;0.8212;0.8528;0.8559;0.8528;0.8535;0.8333;0.8419;0.8333;0.8353;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8269;0.8296;0.8269;0.8273;0.8506;0.8513;0.8506;0.8508;0.8333;0.8419;0.8333;0.8353;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8183;0.8199;0.8183;0.8172;0.8685;0.8679;0.8685;0.8681;0.8333;0.8489;0.8333;0.8352;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=13, weights='distance')
KNeighborsClassifier;0.8319;0.8354;0.8319;0.832;0.8429;0.8468;0.8429;0.8438;0.8167;0.8287;0.8167;0.819;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8313;0.8323;0.8313;0.8309;0.8743;0.8769;0.8743;0.8748;0.8167;0.8239;0.8167;0.8189;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=13, weights='distance')
KNeighborsClassifier;0.8304;0.8349;0.8304;0.8309;0.8629;0.8674;0.8629;0.864;0.8167;0.8239;0.8167;0.8189;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8284;0.8303;0.8284;0.8282;0.8247;0.8227;0.8247;0.8232;0.8167;0.8268;0.8167;0.8185;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8335;0.8373;0.8335;0.8339;0.8393;0.8419;0.8393;0.8403;0.8167;0.8268;0.8167;0.8185;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8264;0.8287;0.8264;0.8256;0.8416;0.8449;0.8416;0.8427;0.8167;0.8268;0.8167;0.8185;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8232;0.826;0.8232;0.8231;0.8517;0.8526;0.8517;0.8521;0.8167;0.8268;0.8167;0.8185;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 11, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=11, weights='distance')
KNeighborsClassifier;0.8207;0.8219;0.8207;0.8195;0.836;0.8451;0.836;0.8375;0.8167;0.8268;0.8167;0.8185;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=13, weights='distance')
KNeighborsClassifier;0.8273;0.832;0.8273;0.8269;0.8496;0.8525;0.8496;0.8502;0.8167;0.8268;0.8167;0.8185;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=13, weights='distance')
KNeighborsClassifier;0.8298;0.834;0.8298;0.8304;0.836;0.8431;0.836;0.8374;0.8167;0.8268;0.8167;0.8185;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=13, weights='distance')
KNeighborsClassifier;0.8303;0.8317;0.8303;0.83;0.8292;0.8313;0.8292;0.83;0.8167;0.8373;0.8167;0.8184;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.802;0.8027;0.802;0.8004;0.8316;0.8431;0.8316;0.8321;0.8167;0.8243;0.8167;0.8182;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8161;0.8183;0.8161;0.8161;0.8519;0.8522;0.8519;0.852;0.8167;0.84;0.8167;0.8171;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8244;0.8272;0.8244;0.8244;0.8764;0.8787;0.8764;0.8769;0.8;0.8101;0.8;0.8024;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8234;0.8266;0.8234;0.8237;0.8517;0.8591;0.8517;0.8533;0.8;0.8101;0.8;0.8024;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=13, weights='distance')
KNeighborsClassifier;0.8255;0.8287;0.8255;0.8254;0.8429;0.8457;0.8429;0.8437;0.8;0.8101;0.8;0.8024;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8185;0.8202;0.8185;0.818;0.8596;0.8616;0.8596;0.8603;0.8;0.813;0.8;0.8023;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 11, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=11, weights='distance')
KNeighborsClassifier;0.8341;0.8357;0.8341;0.8346;0.8854;0.885;0.8854;0.8841;0.8;0.816;0.8;0.8023;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8293;0.8299;0.8293;0.8285;0.8552;0.8598;0.8552;0.8564;0.8;0.813;0.8;0.8023;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=13, weights='distance')
KNeighborsClassifier;0.83;0.8361;0.83;0.8303;0.8541;0.8529;0.8541;0.8532;0.8;0.8259;0.8;0.8012;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.8184;0.8219;0.8184;0.818;0.8674;0.8669;0.8674;0.8665;0.8;0.8259;0.8;0.8012;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=13, weights='distance')
KNeighborsClassifier;0.8169;0.8221;0.8169;0.8175;0.8494;0.8489;0.8494;0.8491;0.7833;0.8068;0.7833;0.7843;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
KNeighborsClassifier;0.836;0.8386;0.836;0.8362;0.8393;0.8394;0.8393;0.8393;0.7833;0.8068;0.7833;0.7843;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=13, weights='distance')
KNeighborsClassifier;0.8203;0.8226;0.8203;0.8197;0.8393;0.8448;0.8393;0.8407;0.7833;0.785;0.7833;0.7829;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=13, weights='distance')
KNeighborsClassifier;0.8225;0.8261;0.8225;0.8223;0.8067;0.8068;0.8067;0.8006;0.7667;0.7829;0.7667;0.7655;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=13, weights='distance')
