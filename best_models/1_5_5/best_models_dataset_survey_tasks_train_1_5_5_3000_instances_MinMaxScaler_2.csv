Algorithm;Train Accuracy;Train Precision;Train Recall;Train F1 Score;Test Accuracy;Test Precision;Test Recall;Test F1 Score;Val. Accuracy;Val. Precision;Val. Recall;Val. F1 Score;AUC;Bal. Strategy;SMOTE Instances;Scale;Features;Folds;Hyper Params.;Model
SVC;0.8274;0.8446;0.8274;0.8256;0.8748;0.8752;0.8748;0.8747;0.8167;0.8172;0.8167;0.8166;0.9355;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 462};SVC(C=10, probability=True, random_state=462)
MLPClassifier;0.8642;0.8651;0.8642;0.8642;0.881;0.8825;0.881;0.8808;0.8167;0.8193;0.8167;0.8157;0.9672;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 647, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=647)
RandomForestClassifier;0.8731;0.8739;0.8731;0.8729;0.8855;0.8854;0.8855;0.8854;0.8;0.8013;0.8;0.8003;0.9717;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 10, 'random_state': 614};RandomForestClassifier(n_estimators=10, random_state=614)
SVC;0.8279;0.8455;0.8279;0.8257;0.8782;0.8784;0.8782;0.8781;0.8;0.8013;0.8;0.8003;0.9331;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 95};SVC(C=10, probability=True, random_state=95)
SVC;0.8267;0.8432;0.8267;0.8244;0.8782;0.8791;0.8782;0.8782;0.8;0.8013;0.8;0.8003;0.934;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 10, 'kernel': 'rbf', 'random_state': 764};SVC(C=10, probability=True, random_state=764)
DecisionTreeClassifier;0.8783;0.8792;0.8783;0.8782;0.8759;0.8758;0.8759;0.8758;0.8;0.8;0.8;0.8;0.9703;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 214};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=214)
MLPClassifier;0.8631;0.8639;0.8631;0.8628;0.8832;0.8836;0.8832;0.8832;0.8;0.8016;0.8;0.7997;0.967;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 707, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=707)
RandomForestClassifier;0.8757;0.8766;0.8757;0.8757;0.8742;0.8761;0.8742;0.8742;0.8;0.8016;0.8;0.7997;0.9719;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 20, 'random_state': 976};RandomForestClassifier(n_estimators=20, random_state=976)
MLPClassifier;0.8693;0.8703;0.8693;0.8691;0.8703;0.8716;0.8703;0.8702;0.8;0.8018;0.8;0.7986;0.9687;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_iter': 100000, 'random_state': 172, 'solver': 'adam'};MLPClassifier(max_iter=100000, random_state=172)
DecisionTreeClassifier;0.877;0.8777;0.877;0.8769;0.8765;0.8776;0.8765;0.8763;0.7833;0.7838;0.7833;0.7832;0.9715;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 783};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=783)
KNeighborsClassifier;0.8573;0.8591;0.8573;0.8571;0.8832;0.8836;0.8832;0.8832;0.7833;0.7838;0.7833;0.7832;0.9549;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 15, 'weights': 'distance'};"KNeighborsClassifier(metric='manhattan', n_neighbors=15, p=1,
                     weights='distance')"
KNeighborsClassifier;0.8499;0.8518;0.8499;0.8498;0.8838;0.8848;0.8838;0.8839;0.7833;0.7838;0.7833;0.7832;0.9516;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 15, 'weights': 'distance'};"KNeighborsClassifier(metric='manhattan', n_neighbors=15, p=1,
                     weights='distance')"
RandomForestClassifier;0.8825;0.883;0.8825;0.8824;0.8636;0.8637;0.8636;0.8634;0.7833;0.7838;0.7833;0.7832;0.9727;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'n_estimators': 10, 'random_state': 763};RandomForestClassifier(n_estimators=10, random_state=763)
KNeighborsClassifier;0.8607;0.8636;0.8607;0.8604;0.8512;0.8528;0.8512;0.851;0.7833;0.7873;0.7833;0.7831;0.9537;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'minkowski', 'n_neighbors': 15, 'weights': 'distance'};KNeighborsClassifier(n_neighbors=15, weights='distance')
DecisionTreeClassifier;0.8735;0.8742;0.8735;0.8734;0.8574;0.8575;0.8574;0.8571;0.7167;0.7206;0.7167;0.7121;0.9691;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 854};DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=854)
LogisticRegression;0.7094;0.7178;0.7094;0.7073;0.7277;0.734;0.7277;0.7267;0.6667;0.6926;0.6667;0.6632;0.834;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 0.1, 'penalty': 'l2', 'random_state': 118, 'solver': 'lbfgs'};"LogisticRegression(C=0.1, max_iter=100000, multi_class='multinomial',
                   random_state=118)"
LogisticRegression;0.7146;0.7241;0.7146;0.7125;0.7002;0.7209;0.7002;0.7009;0.65;0.6891;0.65;0.6474;0.8387;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 0.1, 'penalty': 'l2', 'random_state': 783, 'solver': 'lbfgs'};"LogisticRegression(C=0.1, max_iter=100000, multi_class='multinomial',
                   random_state=783)"
LogisticRegression;0.7155;0.7253;0.7155;0.7135;0.7103;0.7159;0.7103;0.7084;0.6333;0.655;0.6333;0.6247;0.836;smote;3000;MinMaxScaler;['storyPoints', 'polarity', 'O', 'C', 'E', 'A', 'N'];10;{'C': 1, 'penalty': 'l2', 'random_state': 78, 'solver': 'lbfgs'};"LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=78)"
