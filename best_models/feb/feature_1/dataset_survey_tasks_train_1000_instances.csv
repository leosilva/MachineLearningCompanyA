Algorithm,Train Accuracy,Train Precision,Train Recall,Train F1 Score,Test Accuracy,Test Precision,Test Recall,Test F1 Score,Val. Accuracy,Val. Precision,Val. Recall,Val. F1 Score,AUC,Bal. Strategy,SMOTE Instances,Scale,Features,Folds,Hyper Params.,Model
RandomForestClassifier,0.9617,0.9628,0.9617,0.9616,0.9711,0.9717,0.9711,0.971,0.8833,0.8884,0.8833,0.8834,0.9936,smote,1000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 118}","RandomForestClassifier(n_estimators=20, random_state=118)"
KNeighborsClassifier,0.9477,0.9486,0.9477,0.9476,0.9575,0.9579,0.9575,0.9573,0.8833,0.8891,0.8833,0.8829,0.9807,smote,1000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', p=1, weights='distance')"
KNeighborsClassifier,0.946,0.9476,0.946,0.9459,0.9507,0.9518,0.9507,0.9506,0.85,0.8731,0.85,0.8498,0.9798,smote,1000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', p=1, weights='distance')"
LogisticRegression,0.8682,0.8697,0.8682,0.8673,0.8741,0.8747,0.8741,0.8732,0.85,0.8508,0.85,0.849,0.9573,smote,1000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 454, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=454)"
DecisionTreeClassifier,0.9264,0.9278,0.9264,0.9265,0.932,0.9332,0.932,0.9318,0.8333,0.8581,0.8333,0.8369,0.9773,smote,1000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 856}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=856)"
SVC,0.8839,0.8848,0.8839,0.8837,0.8946,0.8951,0.8946,0.8944,0.8333,0.8386,0.8333,0.8348,0.947,smote,1000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'linear', 'random_state': 285}","SVC(C=10, kernel='linear', probability=True, random_state=285)"
LogisticRegression,0.8644,0.8651,0.8644,0.864,0.8622,0.863,0.8622,0.8625,0.8333,0.8386,0.8333,0.8348,0.955,smote,1000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 504, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=504)"
LogisticRegression,0.878,0.8785,0.878,0.8775,0.9048,0.9048,0.9048,0.9043,0.8333,0.8365,0.8333,0.8339,0.957,smote,1000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 782, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=782)"
MLPClassifier,0.8852,0.891,0.8852,0.8851,0.8605,0.8721,0.8605,0.861,0.8333,0.8361,0.8333,0.8315,0.9701,smote,1000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 668, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=668)"
RandomForestClassifier,0.9545,0.9557,0.9545,0.9544,0.9609,0.961,0.9609,0.9606,0.8167,0.8484,0.8167,0.8214,0.9901,smote,1000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 289}","RandomForestClassifier(n_estimators=20, random_state=289)"
SVC,0.8707,0.8726,0.8707,0.8713,0.8469,0.8477,0.8469,0.8473,0.8167,0.8367,0.8167,0.8208,0.9423,smote,1000,MinMaxScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'linear', 'random_state': 448}","SVC(C=10, kernel='linear', probability=True, random_state=448)"
DecisionTreeClassifier,0.9388,0.9394,0.9388,0.9386,0.9286,0.9293,0.9286,0.9281,0.8167,0.8203,0.8167,0.8162,0.9771,smote,1000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 153}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=153)"
SVC,0.8623,0.8659,0.8623,0.8629,0.8741,0.8751,0.8741,0.8745,0.8,0.8068,0.8,0.8011,0.938,smote,1000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'linear', 'random_state': 802}","SVC(C=10, kernel='linear', probability=True, random_state=802)"
RandomForestClassifier,0.9622,0.9632,0.9622,0.9622,0.9728,0.9729,0.9728,0.9728,0.7833,0.797,0.7833,0.7862,0.9923,smote,1000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 68}","RandomForestClassifier(n_estimators=20, random_state=68)"
MLPClassifier,0.8809,0.8836,0.8809,0.8809,0.8656,0.8692,0.8656,0.8649,0.7833,0.8187,0.7833,0.7862,0.9671,smote,1000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 297, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=297)"
DecisionTreeClassifier,0.9282,0.9294,0.9282,0.9281,0.9303,0.9309,0.9303,0.9303,0.7833,0.7905,0.7833,0.7838,0.9778,smote,1000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 844}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=844)"
MLPClassifier,0.8627,0.8683,0.8627,0.8624,0.8554,0.8575,0.8554,0.8558,0.7833,0.7893,0.7833,0.7824,0.9641,smote,1000,no_scaled,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 352, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=352)"
KNeighborsClassifier,0.9536,0.9546,0.9536,0.9534,0.9507,0.9524,0.9507,0.9508,0.7667,0.7738,0.7667,0.7662,0.9836,smote,1000,StandardScaler,"['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', p=1, weights='distance')"
