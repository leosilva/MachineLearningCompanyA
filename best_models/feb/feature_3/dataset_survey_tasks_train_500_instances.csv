Algorithm,Train Accuracy,Train Precision,Train Recall,Train F1 Score,Test Accuracy,Test Precision,Test Recall,Test F1 Score,Val. Accuracy,Val. Precision,Val. Recall,Val. F1 Score,AUC,Bal. Strategy,SMOTE Instances,Scale,Features,Folds,Hyper Params.,Model
DecisionTreeClassifier,0.8237,0.8429,0.8237,0.8257,0.8472,0.8497,0.8472,0.8482,0.75,0.7665,0.75,0.7462,0.9358,smote,500,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 567}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=567)"
MLPClassifier,0.8039,0.8227,0.8039,0.8039,0.7674,0.7835,0.7674,0.7646,0.7333,0.7425,0.7333,0.7277,0.9384,smote,500,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 446, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=446)"
RandomForestClassifier,0.8238,0.8334,0.8238,0.826,0.8194,0.829,0.8194,0.8213,0.7333,0.747,0.7333,0.7269,0.9404,smote,500,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 515}","RandomForestClassifier(n_estimators=20, random_state=515)"
MLPClassifier,0.7665,0.7873,0.7665,0.7646,0.7604,0.7644,0.7604,0.7592,0.7,0.6962,0.7,0.6961,0.929,smote,500,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 52, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=52)"
KNeighborsClassifier,0.7951,0.8088,0.7951,0.7981,0.8194,0.8273,0.8194,0.8211,0.7,0.7396,0.7,0.6879,0.9183,smote,500,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'minkowski', 'n_neighbors': 13, 'weights': 'distance'}","KNeighborsClassifier(n_neighbors=13, weights='distance')"
SVC,0.7951,0.8172,0.7951,0.7942,0.7917,0.8189,0.7917,0.7906,0.6833,0.7012,0.6833,0.6857,0.904,smote,500,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 1, 'kernel': 'linear', 'random_state': 167}","SVC(C=1, kernel='linear', probability=True, random_state=167)"
DecisionTreeClassifier,0.8221,0.8313,0.8221,0.8249,0.8264,0.8336,0.8264,0.8288,0.6833,0.6802,0.6833,0.6799,0.9419,smote,500,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 177}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=177)"
MLPClassifier,0.7639,0.7824,0.7639,0.7636,0.8646,0.8685,0.8646,0.8646,0.6833,0.6782,0.6833,0.6788,0.9256,smote,500,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_iter': 100000, 'random_state': 440, 'solver': 'adam'}","MLPClassifier(max_iter=100000, random_state=440)"
RandomForestClassifier,0.8264,0.8376,0.8264,0.829,0.8715,0.875,0.8715,0.8728,0.6833,0.6797,0.6833,0.6755,0.9353,smote,500,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 10, 'random_state': 410}","RandomForestClassifier(n_estimators=10, random_state=410)"
SVC,0.7822,0.8073,0.7822,0.7863,0.7292,0.763,0.7292,0.7367,0.6667,0.6924,0.6667,0.6656,0.8759,smote,500,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'kernel': 'linear', 'random_state': 743}","SVC(C=10, kernel='linear', probability=True, random_state=743)"
LogisticRegression,0.7934,0.8076,0.7934,0.7971,0.7812,0.7927,0.7812,0.7852,0.6667,0.6702,0.6667,0.6647,0.9363,smote,500,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 376, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=376)"
SVC,0.7821,0.8556,0.7821,0.7812,0.7917,0.8504,0.7917,0.7932,0.6667,0.6722,0.6667,0.6627,0.9108,smote,500,StandardScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 0.1, 'kernel': 'linear', 'random_state': 109}","SVC(C=0.1, kernel='linear', probability=True, random_state=109)"
LogisticRegression,0.7891,0.8026,0.7891,0.7903,0.7986,0.8104,0.7986,0.8009,0.6667,0.694,0.6667,0.6609,0.9316,smote,500,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 1, 'penalty': 'l2', 'random_state': 246, 'solver': 'lbfgs'}","LogisticRegression(C=1, max_iter=100000, multi_class='multinomial',
                   random_state=246)"
KNeighborsClassifier,0.8141,0.8283,0.8141,0.8171,0.8646,0.8731,0.8646,0.8656,0.6667,0.6682,0.6667,0.6584,0.9216,smote,500,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 11, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', n_neighbors=11, p=1,
                     weights='distance')"
DecisionTreeClassifier,0.8263,0.8359,0.8263,0.8287,0.8125,0.8286,0.8125,0.8169,0.65,0.6753,0.65,0.654,0.9403,smote,500,MinMaxScaler,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'max_depth': 10, 'min_samples_leaf': 5, 'random_state': 785}","DecisionTreeClassifier(max_depth=10, min_samples_leaf=5, random_state=785)"
RandomForestClassifier,0.8307,0.8416,0.8307,0.8308,0.8438,0.8486,0.8438,0.8449,0.65,0.6477,0.65,0.6486,0.9398,smote,500,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'n_estimators': 20, 'random_state': 748}","RandomForestClassifier(n_estimators=20, random_state=748)"
LogisticRegression,0.8177,0.8296,0.8177,0.8182,0.7812,0.7937,0.7812,0.7838,0.65,0.6469,0.65,0.6482,0.9391,smote,500,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'C': 10, 'penalty': 'l2', 'random_state': 266, 'solver': 'lbfgs'}","LogisticRegression(C=10, max_iter=100000, multi_class='multinomial',
                   random_state=266)"
KNeighborsClassifier,0.8143,0.8256,0.8143,0.8143,0.8125,0.8163,0.8125,0.814,0.65,0.6411,0.65,0.6438,0.9335,smote,500,no_scaled,"['storyPoints', 'polarity', 'stress', 'O', 'C', 'E', 'A', 'N']",10,"{'metric': 'manhattan', 'n_neighbors': 15, 'weights': 'distance'}","KNeighborsClassifier(metric='manhattan', n_neighbors=15, p=1,
                     weights='distance')"
