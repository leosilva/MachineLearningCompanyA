Algorithm;Train Accuracy;Train Precision;Train Recall;Train F1 Score;Test Accuracy;Test Precision;Test Recall;Test F1 Score;Val. Accuracy;Val. Precision;Val. Recall;Val. F1 Score;Bal. Strategy;SMOTE Instances;Scale;Features;Folds;Hyper Params.;Model
KNeighborsClassifier;0.9641;0.9644;0.9641;0.9641;0.9821;0.9823;0.9821;0.9821;0.9167;0.9212;0.9167;0.9174;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', n_neighbors=7, p=1, weights='distance')
KNeighborsClassifier;0.9666;0.9668;0.9666;0.9666;0.9787;0.9787;0.9787;0.9787;0.9;0.9015;0.9;0.9004;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9645;0.9646;0.9645;0.9645;0.9832;0.9832;0.9832;0.9832;0.9;0.9015;0.9;0.9004;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9631;0.9633;0.9631;0.9631;0.9922;0.9922;0.9922;0.9922;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9663;0.9665;0.9663;0.9663;0.9832;0.9836;0.9832;0.9833;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9654;0.9657;0.9654;0.9654;0.9787;0.9788;0.9787;0.9788;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9647;0.9651;0.9647;0.9647;0.9855;0.9855;0.9855;0.9854;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', n_neighbors=7, p=1, weights='distance')
KNeighborsClassifier;0.965;0.9653;0.965;0.9649;0.981;0.9811;0.981;0.981;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9646;0.9649;0.9646;0.9646;0.9899;0.9899;0.9899;0.9899;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9681;0.9682;0.9681;0.9681;0.9877;0.9877;0.9877;0.9877;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9654;0.9657;0.9654;0.9655;0.9855;0.9856;0.9855;0.9855;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9679;0.9681;0.9679;0.9679;0.9821;0.9823;0.9821;0.9821;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9668;0.9669;0.9668;0.9668;0.9832;0.9832;0.9832;0.9832;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9632;0.9634;0.9632;0.9632;0.9832;0.9832;0.9832;0.9832;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9637;0.9639;0.9637;0.9637;0.9888;0.9888;0.9888;0.9888;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9617;0.9619;0.9617;0.9617;0.9855;0.9855;0.9855;0.9855;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9662;0.9663;0.9662;0.9662;0.9832;0.9833;0.9832;0.9832;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9667;0.9668;0.9667;0.9667;0.9821;0.9821;0.9821;0.9821;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9667;0.9669;0.9667;0.9667;0.981;0.9814;0.981;0.981;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 7, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', n_neighbors=7, p=1, weights='distance')
KNeighborsClassifier;0.9664;0.9667;0.9664;0.9665;0.9866;0.9866;0.9866;0.9866;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9651;0.9653;0.9651;0.9651;0.9866;0.9866;0.9866;0.9866;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9651;0.9654;0.9651;0.9651;0.9832;0.9833;0.9832;0.9832;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9668;0.967;0.9668;0.9668;0.9821;0.9821;0.9821;0.9821;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9651;0.9653;0.9651;0.9651;0.9911;0.9912;0.9911;0.9911;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9627;0.963;0.9627;0.9627;0.9832;0.9832;0.9832;0.9832;0.8833;0.8939;0.8833;0.8836;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9662;0.9664;0.9662;0.9662;0.9866;0.9867;0.9866;0.9866;0.8667;0.8722;0.8667;0.8667;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.965;0.9652;0.965;0.965;0.9866;0.9866;0.9866;0.9866;0.8667;0.8722;0.8667;0.8667;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9647;0.965;0.9647;0.9647;0.9866;0.9866;0.9866;0.9866;0.8667;0.8722;0.8667;0.8667;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9645;0.9646;0.9645;0.9645;0.9799;0.9799;0.9799;0.9799;0.8667;0.8722;0.8667;0.8667;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
KNeighborsClassifier;0.9681;0.9682;0.9681;0.968;0.9855;0.9857;0.9855;0.9855;0.8667;0.8814;0.8667;0.866;smote;3000;no_scaled;['storyPoints', 'polarity_mean', 'stress_mean', 'O', 'C', 'E', 'A', 'N'];10;{'metric': 'manhattan', 'n_neighbors': 5, 'weights': 'distance'};KNeighborsClassifier(metric='manhattan', p=1, weights='distance')
